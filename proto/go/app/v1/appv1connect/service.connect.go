// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app/v1/service.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ucpr/atlas-search-example/proto/go/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "app.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceGetPostProcedure is the fully-qualified name of the Service's GetPost RPC.
	ServiceGetPostProcedure = "/app.v1.Service/GetPost"
	// ServiceListPostsProcedure is the fully-qualified name of the Service's ListPosts RPC.
	ServiceListPostsProcedure = "/app.v1.Service/ListPosts"
	// ServiceCreatePostProcedure is the fully-qualified name of the Service's CreatePost RPC.
	ServiceCreatePostProcedure = "/app.v1.Service/CreatePost"
)

// ServiceClient is a client for the app.v1.Service service.
type ServiceClient interface {
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
}

// NewServiceClient constructs a client for the app.v1.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		getPost: connect.NewClient[v1.GetPostRequest, v1.GetPostResponse](
			httpClient,
			baseURL+ServiceGetPostProcedure,
			opts...,
		),
		listPosts: connect.NewClient[v1.ListPostsRequest, v1.ListPostsResponse](
			httpClient,
			baseURL+ServiceListPostsProcedure,
			opts...,
		),
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+ServiceCreatePostProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	getPost    *connect.Client[v1.GetPostRequest, v1.GetPostResponse]
	listPosts  *connect.Client[v1.ListPostsRequest, v1.ListPostsResponse]
	createPost *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
}

// GetPost calls app.v1.Service.GetPost.
func (c *serviceClient) GetPost(ctx context.Context, req *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return c.getPost.CallUnary(ctx, req)
}

// ListPosts calls app.v1.Service.ListPosts.
func (c *serviceClient) ListPosts(ctx context.Context, req *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error) {
	return c.listPosts.CallUnary(ctx, req)
}

// CreatePost calls app.v1.Service.CreatePost.
func (c *serviceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the app.v1.Service service.
type ServiceHandler interface {
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceGetPostHandler := connect.NewUnaryHandler(
		ServiceGetPostProcedure,
		svc.GetPost,
		opts...,
	)
	serviceListPostsHandler := connect.NewUnaryHandler(
		ServiceListPostsProcedure,
		svc.ListPosts,
		opts...,
	)
	serviceCreatePostHandler := connect.NewUnaryHandler(
		ServiceCreatePostProcedure,
		svc.CreatePost,
		opts...,
	)
	return "/app.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceGetPostProcedure:
			serviceGetPostHandler.ServeHTTP(w, r)
		case ServiceListPostsProcedure:
			serviceListPostsHandler.ServeHTTP(w, r)
		case ServiceCreatePostProcedure:
			serviceCreatePostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.Service.GetPost is not implemented"))
}

func (UnimplementedServiceHandler) ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.Service.ListPosts is not implemented"))
}

func (UnimplementedServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.Service.CreatePost is not implemented"))
}
